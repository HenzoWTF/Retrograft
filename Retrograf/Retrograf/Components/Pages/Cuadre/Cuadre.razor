@page "/Cuadre"
@inject CuadreServices cuadreServices
@inject VentasServices ventasService;
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer
@using Microsoft.JSInterop

<PageTitle>Cuadre</PageTitle>

<div class="inicio">
    <div class="bloque productos-vendidos">
        <img src="./Imagenes/Ventas.png" alt="ico">
        <h2>Ingresos</h2>
        <p>@cuadre.Ingresos</p>
        <p class="descripcion">Cantidad de ventas en esta semana</p>
    </div>
    <div class="bloque gananciasT">
        <img src="./Imagenes/ProductosI.png" alt="ico">
        <h2>Gastos</h2>
        <p>@cuadre.Gastos</p>
        <p class="descripcion"><span>Cantidad de gastos en la semana</span></p>
    </div>
    <div class="bloque cuadre">
         <label class="text-dark">Opción:</label>
                <select class="form-select mb-3" @bind="selectedOption">
                    <option value="diario">Diario</option>
                    <option value="semanal">Semanal</option>
                    <option value="Mensual">Mensual</option>
                </select>
                <button class="btn btn-primary" @onclick="CalcularCuadre">Calcular</button>
            
            @if (cuadre != null)
            {
                <div>
                    <h4>@(selectedOption == "diario" ? "Cuadre Diario" : selectedOption == "semanal" ? "Cuadre Semanal" : "Cuadre Mensual")</h4>
                </div>
                <div class="row">
                    <div class="col-sm-6">
                        <p class="fs-7 fw-bold text-dark">Fecha:</p>
                        <p class="fs-7 text-dark">@cuadre.FechaCuadre.ToShortDateString()</p>
                    </div>
                    <div class="col-sm-6">
                        <p class="fs-7 fw-bold text-dark">Ingresos:</p>
                        <p class="fs-7 text-dark">@cuadre.Ingresos</p>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-6">
                        <p class="fs-7 fw-bold text-dark">Gastos:</p>
                        <p class="fs-7 text-dark">@cuadre.Gastos</p>
                    </div>
                    <div class="col-sm-6">
                        <p class="fs-7 fw-bold text-dark">Total:</p>
                        <p class="fs-7 text-dark">@cuadre.Total</p>
                    </div>
                </div>
            }
            </div>
    </div>

<div class="chart-container-Center">
    <div style="width:1000px; height:00px">
        <canvas id="myChart"></canvas>
    </div>
</div>

<script>
    window.Graficar = async (data) => {
        const ctx = document.getElementById('myChart');

        new Chart(ctx, {
            type: 'line',
            data: data,
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'top',
                    },
                    title: {
                        display: true,
                        text: 'Ganancias y Pérdidas'
                    }
                }
            }
        });
    };

</script>

@code {
    public string selectedOption = "diario";
    public Clases.Cuadre cuadre = new Clases.Cuadre();
    public List<Ventas> ListaVentas = new List<Ventas>();
    private bool cuadreRealizadoHoy = false;

    protected override async Task OnInitializedAsync()
    {
        ActualizarGrafico();
        // DateTime today = DateTime.Today;
        // DateTime firstDayOfMonth = new DateTime(today.Year, today.Month, 1);
        // DateTime lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);


        // ListaVentas = (await ventasService.GetVentas())
        //     .Where(venta => venta.Fecha >= firstDayOfMonth && venta.Fecha <= lastDayOfMonth)
        //     .ToList();

    }

    private async Task ActualizarGrafico()
    {
        var data = await ObtenerDatosGrafico();
        await JSRuntime.InvokeVoidAsync("Graficar", data);
    }

    private async Task<object> ObtenerDatosGrafico()
    {
        if (selectedOption == "diario")
        {
            DateTime fecha = DateTime.Today;
            cuadre.Nombre = "diario";
            cuadre = await cuadreServices.CalcularCuadreDiario(fecha);
        }
        else if (selectedOption == "semanal")
        {
            DateTime fechaInicioSemana = DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek);
            cuadre.Nombre = "semanal";
            cuadre = await cuadreServices.CalcularCuadreSemanal(fechaInicioSemana);
        }
        else if (selectedOption == "mensual")
        {
            DateTime primerDiaMes = new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1);
            cuadre.Nombre = "mensual";
            cuadre = await cuadreServices.CalcularCuadreMensual(primerDiaMes);
        }

        // Aquí se debe preparar los datos para el gráfico
        var data = new
        {
            labels = new[] { "Ingresos", "Gastos" },
            datasets = new[]
            {
                new { label = "Ingresos", data = new[] { cuadre.Ingresos } },
                new { label = "Gastos", data = new[] { cuadre.Gastos } }
            }
        };

        return data;
    }

    private async Task CalcularCuadre()
    {
        
        if (!cuadreRealizadoHoy)
        {
            if (selectedOption == "diario")
            {
                DateTime fecha = DateTime.Today;
                cuadre = await cuadreServices.CalcularCuadreDiario(fecha);
                await cuadreServices.GuardarCuadreEnBaseDeDatos(fecha);
            }
            else if (selectedOption == "semanal")
            {
                DateTime fechaInicioSemana = DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek);
                cuadre = await cuadreServices.CalcularCuadreSemanal(fechaInicioSemana);
                await cuadreServices.GuardarCuadreEnBaseDeDatos(fechaInicioSemana);
            }
            else if (selectedOption == "mensual")
            {
                DateTime primerDiaMes = new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1);
                cuadre = await cuadreServices.CalcularCuadreMensual(primerDiaMes);
                await cuadreServices.GuardarCuadreEnBaseDeDatos(primerDiaMes);
            }
            cuadreRealizadoHoy = true;
        }
    }
}
