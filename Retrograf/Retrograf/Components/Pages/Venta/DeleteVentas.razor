@page "/DeleteVentas/{Id:int}"
@using Microsoft.AspNetCore.Authorization
@inject VentasServices ventasServices
@inject ProductosServices productosServices
@inject NavigationManager navigationManager
@inject NotificationService notificationServices
@attribute [Authorize(Roles = "Admin")]
@rendermode InteractiveServer

<PageTitle>Ventas</PageTitle>

<div class="d-flex justify-content-center">
    <img src="/Imagenes/Logo.png" alt="Logo de la aplicación" style="width:200px; height:auto; display: block;">
</div>

<section class=" gradient-custom">
    <div class="container py-5 h-100">
        <div class="row d-flex justify-content-center align-items-center">
            <div class="fondo col-lg-6 col-xl-6" style="border-radius: 1rem;">

                <div class="card-body p-5 text-center">

                    <div class="tab-content">
                        <h1 class="fw-bold mb-2 text-uppercase">Eliminar ventas</h1>

                        <div class="col-md-11 mx-auto">
                            <h3 class="text-center"><strong>Datos de la venta</strong></h3>
                            <div class="border-primary border border-2">
                                <div class="card-body">
                                    <ul class="list-unstyled" style="margin-top: 20px; margin-bottom: 20px;">
                                        <li><strong>Id:</strong> @Ventas.VentaId</li>
                                        <li><strong>Fecha Creacion:</strong> @Ventas.Fecha.ToShortDateString()</li>
                                        <li><strong>Cliente:</strong> @Ventas.Cliente</li>
                                    </ul>
                                </div>
                            </div>
                        </div>


                        <div class="col-md-11 mx-auto">
                            <h3 class="text-center"><strong>Productos</strong></h3>
                            @if (Ventas.VentaDetalle.Count > 0)
                            {
                                <table class="table miTabla">
                                    <thead>
                                        <tr>
                                            <th>Producto</th>
                                            <th>Cantidad</th>
                                            <th>Precio Venta</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var detalle in Ventas.VentaDetalle)
                                        {
                                            <tr>
                                                <td>@ObtenerProducto(detalle.ProductoId)</td>
                                                <td>@detalle.Cantidad</td>
                                                <td>@ObtenerProductoPrecio(detalle.ProductoId).ToString("N2")</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>

                                <div class="d-flex justify-content-between">
                                    <div>
                                        <p><strong>Total de ventas: </strong>@Ventas.VentaDetalle.Count</p>
                                        <p><strong>Devolucion </strong>@Ventas.Devolucion</p>
                                    </div>
                                    <div>
                                        <p><strong>Forma de pago: </strong>@Ventas.FormaDePago</p>
                                        <p><strong>Total : </strong>@CalcularTotalVentas().ToString("N2")</p>
                                        <p><strong>Deuda : </strong>@Ventas.Deuda</p>
                                    </div>
                                </div>
                            }
                        </div>

                    </div>

                    <!-- Footer -->
                    <div class="d-flex justify-content-center mt-3">
                        <td>
                            <div>
                                <a href="/IndexVentas" class="w-20 btn btn-outline-primary ms-3"><i class="bi bi-arrow-left"></i> Volver</a>
                                <button @onclick="() => ConfirmarEliminar(Ventas.VentaId)" class="btn btn-outline-danger"><i class="bi bi-trash-fill" /> Eliminar</button>
                            </div>
                        </td>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>



@if (Confirmacion)
{
    <div class="modal fade show d-block" id="confirmarModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Confirmar eliminación</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick=Close></button>
                </div>
                <div class="modal-body">
                    ¿Está seguro de que desea eliminar este barbero?
                </div>
                <div class="modal-footer justify-content-center">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick=Close>Cancelar</button>
                    <button type="button" class="btn btn-danger" @onclick=@(async () => await Eliminar(Id))>Eliminar</button>
                </div>
            </div>
        </div>
    </div>
}


@code {

    [Parameter]
    public int Id { get; set; }
    public bool Confirmacion = false;
    private Ventas Ventas { get; set; } = new Ventas();
    public IEnumerable<Productos> Productos { get; set; } = new List<Productos>();


    protected override async Task OnInitializedAsync()
    {
        if (Id > 0)
        {
            Ventas = await ventasServices.GetVenta(Id);
            Productos = await productosServices.GetProductos();
        }
    }

    private void Close()
    {
        Confirmacion = false;
    }


    private async Task Eliminar(int Id)
    {
        if (Id != 0)
        {
            foreach (var detalle in Ventas.VentaDetalle)
            {
                var producto = Productos.FirstOrDefault(p => p.ProductoId == detalle.ProductoId);
                if (producto != null)
                {
                    producto.Cantidad += detalle.Cantidad;

                    await productosServices.PutProducto(producto.ProductoId, producto);
                }
            }

            await ventasServices.DeleteVentas(Id);

            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Eliminación exitosa",
                    Detail = "Se ha eliminado la venta correctamente",
                    Duration = 3000
                };
            notificationServices.Notify(mensaje);

            await Task.Delay(3000);
            navigationManager.NavigateTo("/IndexVentas");
        }
    }
    private async Task ConfirmarEliminar(int id)
    {
        Confirmacion = true;
    }

    public string ObtenerProducto(int id)
    {
        var producto = Productos.FirstOrDefault(p => p.ProductoId == id);
        return producto != null ? producto.Nombre : "";
    }

    public float ObtenerProductoPrecio(int id)
    {
        var dato = Productos.FirstOrDefault(c => c.ProductoId == id);

        return dato.PrecioVenta;
    }

    public float CalcularTotalVentas()
    {
        float total = 0;
        foreach (var detalle in Ventas.VentaDetalle)
        {
            total += detalle.Cantidad * ObtenerProductoPrecio(detalle.ProductoId);
        }
        return total;
    }
}