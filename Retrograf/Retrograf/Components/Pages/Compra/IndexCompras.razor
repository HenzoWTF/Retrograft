@page "/CompraIndex"
@using Microsoft.AspNetCore.Authorization
@inject ComprasServices comprasService
@inject ProductosServices productosServices
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Admin")]


<PageTitle>Compras</PageTitle>

<RadzenNotification />
<div class="d-flex justify-content-center">
    <img src="/Imagenes/Logo.png" alt="Logo de la aplicación" style="width:200px; height:auto; display: block;">
</div>


<section class=" gradient-custom">
    <div class="container py-5 h-100">
        <div class="row d-flex justify-content-center align-items-center">
            <div class="fondo " style="border-radius: 1rem;">

                <div class="card-body p-5 text-center">
                    <h1 class="fw-bold mb-2 text-uppercase">Compras</h1>

                    <div class="tab-content">
                        <form>
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>Id</th>
                                        <th>Fecha de compra</th>
                                        <th>Acciones</th>
                                    </tr>
                                </thead>

                                <tbody>
                                    @if (Compras.Count == 0)
                                    {
                                        @mensaje
                                    }
                                    else
                                    {
                                        @foreach (var compra in Compras)
                                        {
                                            <tr>
                                                <td>@compra.CompraId</td>
                                                <td>@compra.FecheDeCompra.ToShortDateString()</td>
                                                <td>
                                                    <div>
                                                        <a href="/EditCompra/@compra.CompraId" class="btn btn-outline-primary"><i class="bi bi-pencil-fill" /> Editar</a>
                                                        <a href="/ViewCompra/@compra.CompraId" class="btn btn-outline-primary"><i class="bi bi-eyes" /> View</a>
                                                        <a href="/DeleteCompra/@compra.CompraId" class="btn btn-outline-danger"><i class="bi bi-trash-fill" /> Eliminar</a>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    }
                                </tbody>

                            </table>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>


@code {
    private List<Compra> Compras = new List<Compra>();
    public IEnumerable<Productos> Productos = new List<Productos>();
    public string filtro { get; set; }
    public string valorFiltro { get; set; }
    public DateTime desde { get; set; } = DateTime.Today;
    public DateTime hasta { get; set; } = DateTime.Today;
    public string mensaje = "";

    protected override async Task OnInitializedAsync()
    {
        if (Compras == null || !Compras.Any())
            mensaje = "No hay datos";

        Compras = (await comprasService.GetCompras()).ToList();
        Productos = await productosServices.GetProductos();
    }

    public async Task Buscar()
    {
        if (desde > hasta)
        {
            mensaje = "La fecha inicial no puede ser mayor a la fecha final";
            StateHasChanged();
            await Nuevo();
            return;
        }

        else if (filtro == null)
        {
            mensaje = "Debe elegir un método parar filtrar";
            StateHasChanged();
            await Nuevo();
            return;
        }

        else if (valorFiltro == null)
        {
            mensaje = "Debe ingresar un dato";
            StateHasChanged();
            await Nuevo();
            return;
        }

        List<Productos> listaFiltro = new List<Productos>();

        switch (filtro)
        {
            case "id":
                if (int.TryParse(valorFiltro, out int id))
                {
                    var resultadoId = Compras.FirstOrDefault(p => p.CompraId == id);
                    if (resultadoId != null &&
                        (resultadoId.FecheDeCompra >= desde && resultadoId.FecheDeCompra <= hasta))
                    {
                        Compras.Clear();
                        Compras.Add(resultadoId);
                    }
                    else
                        mensaje = "No se encontraron resultados";
                }
                else
                {
                    mensaje = "El valor ingresado para TicketId no es válido";
                }
                break;

            case "fecha":

                break;
        }

        StateHasChanged();
        await Nuevo();
    }

    public async Task Nuevo()
    {
        mensaje = string.Empty;
    }

}