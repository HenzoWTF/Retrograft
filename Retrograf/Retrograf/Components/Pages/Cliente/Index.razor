@page "/ClientesIndex"
@using Microsoft.AspNetCore.Authorization
@inject ClienteServices ClientesServices
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@* @attribute [Authorize(Roles = "Admin")] *@

<PageTitle>Índice de Clientes</PageTitle>

<div class="container">
    <div class="card shadow-lg">
        <div class="card-header">
            <div>
                <a href="/" class="btn btn-outline-primary"><i class="bi bi-arrow-left"></i> </a>
                <button type="button" @onclick="IrCreate" class="btn btn-outline-primary"> Crear cliente</button>
            </div>
            <h2>Filtrar Clientes</h2>
            <div class='row'>
                <div class='col-md-3'>
                    <label>Cédula</label>
                    <div class="input-group mb-3">
                        <input id="criterioBusqueda" type="text" class="form-control" @bind="criterio" />
                        <button type="button" @onclick="Filtrar" class="btn btn-outline-primary bi bi-search"></button>
                    </div>
                </div>
                <div class='col-md-3'>
                    <label>Fecha de Registro Desde</label>
                    <InputDate @bind-Value="FechaInicial" class="form-control"></InputDate>
                </div>
                <div class='col-md-3'>
                    <label>Fecha de Registro Hasta</label>
                    <InputDate @bind-Value="FechaFinal" class="form-control"></InputDate>
                </div>

            </div>
        </div>
        <div class="card-body">
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Nombre</th>
                        <th>Direcci&oacute;n</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var cliente in ClientesList.Where(c => (string.IsNullOrEmpty(criterio) || c.NombreCliente.Contains(criterio))))
                    {
                        <tr>
                            <td>@cliente.NombreCliente</td>
                            <td>@cliente.DireccionCliente</td>
                            <td>
                                <a href="/EditClientes/@cliente.IdCliente" class="btn btn-outline-success"><i class="bi bi-pencil-fill"></i></a>
                                <a href="/DeleteCliente/@cliente.IdCliente" class="btn btn-outline-danger"><i class="bi bi-trash3"></i></a>
                                <a href="/ViewClientes/@cliente.IdCliente" class="btn btn-outline-primary"><i class="bi bi-eye"></i></a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <div>
                <button type="button" @onclick="ReiniciarFiltro" class="btn btn-outline-secondary bi bi-arrow-clockwise"> Reiniciar Filtro</button>
            </div>
        </div>
    </div>
</div>

@code {
    public List<Cliente> ClientesList { get; set; } = new List<Cliente>();
    public string criterio { get; set; } = string.Empty;
    public DateTime FechaInicial { get; set; } = DateTime.Today.AddDays(-7); // Default: 7 días atrás
    public DateTime FechaFinal { get; set; } = DateTime.Today;

    protected override async Task OnInitializedAsync()
    {
        await Filtrar();
    }

    async Task Filtrar()
    {
        ClientesList = await ClientesServices.GetList(cliente =>
            (string.IsNullOrEmpty(criterio) || cliente.NombreCliente.Contains(criterio)));
    }

    void ReiniciarFiltro()
    {
        criterio = string.Empty;
        FechaInicial = DateTime.Today.AddDays(-7);
        FechaFinal = DateTime.Today;
        Filtrar();
    }

    void IrCreate()
    {
        NavigationManager.NavigateTo("/CreateClientes");
    }
}